---
title: |
  | Seminar in Data Analysis with R
  | Week 1
subtitle: |
  | PH 700A
author: "Rick Calvo"
format:
  revealjs:
    transition: slide
    transition-speed: fast
    slide-number: c/t #< collapsed/total
editor: visual
---

## Housekeeping Items

-   The Syllabus
-   The Schedule
-   Attendance
-   Assignments
-   Canvas
-   Use of Generative AI
-   GitHub Education

## Welcome to R!

-   This course will serve as an introduction to data analysis using **R** and **RStudio**
-   No prior coding experience is required
-   You should already know about the various statistical analyses

### Two options to access the software:

-   Supply your own system and install **base R** and **RStudio**
-   Sign up for a **Posit Cloud** account under the free plan and access it online

## System Requirements (for PCs)

-   A **64-bit operating system** such as Windows 10/11, a recent Linux distribution, or macOS 10.13 or later
-   A modern processor with two or more cores
-   At least 4gb of memory
-   Lots of storage (for datasets, packages, and other files you create)

## Workflow

![](https://r4ds.hadley.nz/diagrams/data-science/base.png){fig-align="center"}

-   Import and clean data in a reproducible way
-   Analyze data and document your protocol
-   Generate results
-   Communicate findings

## What's the point?

-   Programming is a marketable skill
-   Data analysis and public health are intertwined
-   Current society is data-oriented
-   R is open source and versatile
-   Research requires a strong understanding of data management and analysis
-   Peer-reviewed publications are a universal currency (in research and academia)

## The RStudio Interface

![](https://mdl.library.utoronto.ca/sites/default/public/inline-images/R%26RStudio4_0.png)

## Console

-   The console is the command-line interpreter for R. You provide it some input and it will display output in a linear fashion
-   It is essentially **base R**

## Source

-   Holds your commands, comments, notes, and references to data elements (your *code*/*syntax*)
-   Also for viewing raw data in spreadsheet format

::: callout-note
-   To run code out of a standard syntax file, you highlight the lines you want run and then press the "RUN" button or press Control+Enter
-   Initiating a run without highlighting lines will run the first non-empty line from where the cursor is located
-   Partially highlighting lines and pressing "RUN" will usually result in error
:::

## Environment

-   Where the objects that are imported or created through your code are listed for easy reference
-   Includes variables you create, lists, data frames, results, etc.
-   Anything that you would likely reference in your code will be shown in this area

## Packages

-   The source of strength for R
-   This window shows all the packages that are currently installed on the system and updates when you install more
-   Each package has its own maintenance team and is susceptible to versioning issues

::: callout-note
Even though the package may be installed on your system, it is not usable until it's loaded into the R instance.
:::

## Packages (Continued)

We will use the following packages (and more) over the semester

-   stats
-   tidyverse
-   haven
-   BigRQuery
-   ggplot2

# Getting Started

## Simple Calculations

-   At its most basic level, R is a calculator
-   Primary arithmetic operators include:
    -   **+** for addition
    -   **-** for subtraction
    -   **/** for division
    -   **\*** for multiplication
    -   **\^** for exponentiation
    -   **==** for equivalence

## Calculation Example

You can type an arithmetic problem directly into the console and it will calculate the answer for you.

$(1+2)^3$

```{r}
(1 + 2)^{3}
```

$43+12/32$

```{r}
43+12/32
```

$(43+12)/32$

```{r}
(43+12)/32
```

::: callout-note
Make sure you obey the order of operations (PEMDAS)!
:::

## Objects

-   Objects are anything in R that store values
-   Shown in the Environment window
-   Objects can be created through _assignment_:
    -   Assignment operators include \<- and =
        -   **\<-** is used for assignment
        -   **=** is used for arguments when you're creating or using a function
    -   Assigned objects are manipulable and can be self-referential

## Object Assignment Example

`starting <- 10`

`ending <- 9`

`wording <- "Week 1"`

```{r}
starting <- 10
ending <- 9
wording <- "Week 1"
```

## Assignment vs. Equivalence

Create an object called `a` that is equal to `1`

`a = 1`

Evaluate the veracity of equivalence

`a == 1`

[1] TRUE

`a == 2`

[1] FALSE

## Object Nomenclature

-   Object names are case sensitive
-   Can be any alphanumeric combination but must start with a letter
-   Using underscores \_ and periods . are okay
-   Per the Google R style guide:
    -   New variables should start with a lower case letter and follow **camelCase** or include **underscores** between words

`thisIsAnExampleOfCamelCase`

`anotherVariableInCamelCase`

## Functions

-   Basically tiny programs for performing a specific task
-   Functions are called using commands/command names.
    -   Always followed by round brackets ()
    -   Arguments/parameters to be used by the function are placed within the round brackets

`print(x)`

## Arguments/Parameters

-   Functions require **input** in the form of "arguments"
-   Specific arguments must be stated for a function to work
-   Required arguments are called **compulsory arguments**.
-   You can view the package help files to see what those compulsory arguments are

::: callout-tip
## Side-note on Arguments/Parameters

Technically, arguments are the actual data that is passed into the function via the parameter. The parameter is the place-holder item for in the function that is filled by the argument when the function is run. R help files tend to refer to everything inside the round brackets as "arguments".
:::

## Calling Functions Example

| Command | Description |
|------------------------------------|------------------------------------|
| `?print` | View the help file on the "print" function |
| `help(print)` | Another way to view help for the "print" function |
| `wording <- "Week 1"` | Assigns the text string in the quotes to the object, "wording" |
| `print(wording)` | Issues the command to perform "print" using the "wording" as the compulsory argument |

```{r}
?print
help(print)
wording <- "Week 1"
print(wording)
```

## Example Function

`PercentChange <- function(a, b) {`

`(b-a)/a`

`}`

`answer <- PercentChange(5,10)`

`answer`

```{r}
PercentChange <- function(a, b) {
  (b-a)/a
}

answer <- PercentChange(5,10)
answer
```

The value we get is 1, meaning that we experienced a positive 100% change.

Now that the function is defined, we can use it anytime!

## Example Function (Continued)

`answer2 <-PercentChange(10,9)` `answer2`

```{r}
answer2 <-PercentChange(10,9)
answer2
```

We get is -0.1, meaning the value decreased by 10%.

## More on Compulsory Arguments

-   Must be referenced as shown in the help file

::: callout-tip
If `PercentChange` requires two arguments `PercentChange(a,b)` then both `a` and `b` must be specified either directly (with an equals sign = for assignment) or in their order as listed in the help file/definition.
:::

## Compulsory Arguments Example

`answer2 <-PercentChange(10,9)`

10 is listed first, so 10 takes the "a" parameter and 9 takes the "b" parameter

`answer3 <-PercentChange(b=ending, a=starting)`

"b" is assigned to "ending" and "a" is assigned to "starting"

```{r}
answer2 <-PercentChange(10,9)
answer2

answer3 <-PercentChange(b=ending, a=starting)
answer3
```

## Data Types

-   Numeric
    -   Integers
    -   Doubles
-   Character
    -   Text strings of any length
-   Logical
    -   Binary true/false

`mode(var)` tells you what the variable type is

`typeof(var)` tells you the sub-type, if applicable

## Data Structures

Groupings of values

-   Vector
-   Factor
-   Matrix
-   Data frame

The data structure is determined by what and how many kinds of data types it is composed of

## Vectors

-   A sequence of data elements of the same type (one dimensional list)

`dogAges <- c(5, 4, 5, 7, 9, 11, 15, 2)`

Vector "dogAges" contains values that are numeric integers

**c** stands for "combining". R combines the values in the round brackets to form the vector.

`dogOrder <- 1:8` is the same as

`dogOrder <- c(1,2,3,4,5,6,7,8)`

Another vector "dogOrder" contains a sequence of values 1-8.

```{r}
dogAges <- c(5, 4, 5, 7, 9, 11, 15, 2)
dogOrder <- c(1,2,3,4,5,6,7,8)
```

## Vectors (Continued)

Vectors can also be composed of strings

`dogNames <-c("Rufio", "Chubbs", "Buster", "Stormy", "Saki", "Spike", "Flower", "Frida")`

`length(dogNames)`

```{r}
dogNames <-c("Rufio", "Chubbs", "Buster", "Stormy", "Saki", "Spike", "Flower", "Frida")
length(dogNames)
```

We have a vector containing several dog names.

The `length` function tells us how many items are in the vector.

## Applying Names to Vectors

-   We can apply the names from **dogNames** to other vectors assuming that the order of values is consistent

`names(dogAges) <- dogNames`

`head(dogAges)`

```{r}
names(dogAges) <- dogNames
head(dogAges)
tail(dogAges)
```

**head()** allows to view the beginning parts in the vector

-   For long vectors, the display of values will be truncated
-   Use **tail()** to view the end parts of the vector

## Addressing Vector Elements

-   If we want to view, extract, or perform additional functions on **specific** parts of the vector, we can address the element(s) we need

```{r}
head(dogAges)
```

`dogAges[1]` returns the first element in the vector

```{r}
dogAges[1]
```

You can alternatively query by name.

`dogAges["Saki"]`

```{r}
dogAges["Saki"]
```

## Addressing Vector Elements

You can also query by a specified range or multiple elements

`dogAges[2:4]`

`dogAges[c("Chubbs","Buster","Stormy")]`

```{r}
dogAges[2:4]
dogAges[c("Chubbs","Buster","Stormy")]
```

-   Both methods return 3 values; The first by the order and the second by specifically stating the names.

## Modifying Vectors

Now that we can address elements specifically, we can modify or remove them as needed.

`dogAges[5] <- 8`

```{r}
dogAges[5] <- 8
dogAges
```

-   This changed element #5 (Saki) from 9 to 8.

We can remove an element by inputing a "-" before the order number and reassign the vector to the object name.

`dogAges[-5]`

```{r}
dogAges[-5]
dogAges <- dogAges[-5]
dogAges
spike <- "Spike"
# dogAges[-spike]
# How to Cite strings while modifying vectors
```

-   Saki was removed from the vector.

## Combining Vectors

Appending vectors combines two or more to lengthen the "list" of elements.

`oceansideDogAges <- c(5, 5, 4, 3, 10, 6, 12, 15, 11)`

`sanDiegoDogAges <- c(3, 5, 3, 2, 5, 9, 8, 10, 9, 1, 1, 3)`

`elCajonDogAges <- c(1, 1, 3, 7, 9, 5, 3, 5, 9, 9, 1, 2)`

`sdCountyDogAges <-(c(oceansideDogAges, sanDiegoDogAges, elCajonDogAges))` `length(sdCountyDogAges)`

```{r}
oceansideDogAges <- c(5, 5, 4, 3, 10, 6, 12, 15, 11)
sanDiegoDogAges <- c(3, 5, 3, 2, 5, 9, 8, 10, 9, 1, 1, 3)
elCajonDogAges <- c(1, 1, 3, 7, 9, 5, 3, 5, 9, 9, 1, 2)
sdCountyDogAges <-(c(oceansideDogAges, sanDiegoDogAges, elCajonDogAges))
length(sdCountyDogAges)
```

-   There are 33 elements in the composite vector called, "sdCountyDogAges"

## Factors

-   A one-dimensional list of discrete values
-   Akin to dummy variables for statistical models

`furLength <- factor(c("long", "short", "medium", "long"))`

`str(furLength)`

```{r}
furLength <- factor(c("long", "short", "medium", "long"))
str(furLength)
```

-   The `str` function shows you the structure of the factor

## Factors Continued

-   By default, factors are unordered
-   Create a new factor to denote the order based on an old factor

`furLength_ord <- factor(furLength, levels=c("short", "medium", "long"), ordered=TRUE)`

`min(furLength_ord)`

`max(furLength_ord)`

```{r}
furLength_ord <- factor(furLength, levels=c("short", "medium", "long"), ordered=TRUE)
min(furLength_ord)
max(furLength_ord)
```

-   min() and max() tell you the order and the minimum and maximum values of the factor, respectively

## Matricies

-   Two-dimensional data objects
-   Values are referenced by row and column (like coordinates)

![](https://biocorecrg.github.io/CRG_RIntroduction/images/matrix_indices.png) `MatrixName[a,b]` is the syntax, where **a** is the row and **b** is the column

-   There will be more on matrices when we address model diagnostics and data reduction

## Data Frames

-   Data Frames ("df") are a mixture of various data types
-   Looks like a traditional spreadsheet
-   Can be assembled using other objects, or imported from other sources
-   Much more on this at a later

## Resources

-   https://google.github.io/styleguide/Rguide.html
-   https://cran.r-project.org/web/packages/available_packages_by_name.html
-   http://www.cookbook-r.com/
-   https://r4ds.hadley.nz/
